{
  "version": 3,
  "sources": ["../../three/examples/jsm/loaders/FontLoader.js"],
  "sourcesContent": ["import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor(manager) {\n\n\t\tsuper(manager);\n\n\t}\n\n\tload(url, onLoad, onProgress, onError) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader(this.manager);\n\t\tloader.setPath(this.path);\n\t\tloader.setRequestHeader(this.requestHeader);\n\t\tloader.setWithCredentials(this.withCredentials);\n\t\tloader.load(url, function (text) {\n\n\t\t\tconst font = scope.parse(JSON.parse(text));\n\n\t\t\tif (onLoad) onLoad(font);\n\n\t\t}, onProgress, onError);\n\n\t}\n\n\tparse(json) {\n\n\t\treturn new Font(json);\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor(data) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes(text, size = 100) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths(text, size, this.data);\n\n\t\tfor (let p = 0, pl = paths.length; p < pl; p++) {\n\n\t\t\tshapes.push(...paths[p].toShapes());\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths(text, size, data) {\n\n\tconst chars = Array.from(text);\n\tconst scale = size / data.resolution;\n\tconst line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor (let i = 0; i < chars.length; i++) {\n\n\t\tconst char = chars[i];\n\n\t\tif (char === '\\n') {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push(ret.path);\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n\n\tconst glyph = data.glyphs[char] || data.glyphs['?'];\n\n\tif (!glyph) {\n\n\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif (glyph.o) {\n\n\t\tconst outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\tfor (let i = 0, l = outline.length; i < l;) {\n\n\t\t\tconst action = outline[i++];\n\n\t\t\tswitch (action) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo(x, y);\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo(x, y);\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n"],
  "mappings": "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",
  "names": []
}
